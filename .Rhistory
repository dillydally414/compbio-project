getwd()
library(TreeDist)
library(ape)
setwd("/Users/ekim/Desktop/compbio-project/trees")
setwd("/Users/ekim/Desktop/compbio-project/trees")
jgi <- read.tree("JGItree.nwk")
aim1 <- read.tree("aim1.nwk")
aim2 <- read.tree("aim2.nhx")
a3_10_9 <- read.tree("sample_20_comb0.10.9seqstr_tree.txt")
a3_20_8 <- read.tree("sample_20_comb0.20.8seqstr_tree.txt")
a3_30_7 <- read.tree("sample_20_comb0.30.7seqstr_tree.txt")
a3_40_6 <- read.tree("sample_20_comb0.40.6seqstr_tree.txt")
a3_50_5 <- read.tree("sample_20_comb0.50.5seqstr_tree.txt")
a3_60_4 <- read.tree("sample_20_comb0.60.4seqstr_tree.txt")
a3_70_3 <- read.tree("sample_20_comb0.70.3seqstr_tree.txt")
a3_80_2 <- read.tree("sample_20_comb0.80.2seqstr_tree.txt")
a3_90_1 <- read.tree("sample_20_comb0.90.1seqstr_tree.txt")
a3_ss <- read.tree("sample_20_seq_str_tree.txt")
a3_seq <- read.tree("sample_20_seq_tree.txt")
a3_str <- read.tree("sample_20_str_tree.txt")
trees <- c(aim1, aim2, a3_10_9, a3_20_8, a3_30_7, a3_40_6, a3_50_5, a3_60_4, a3_70_3, a3_80_2, a3_90_1, a3_ss, a3_seq, a3_str)
library(TreeDist)
library(ape)
# normalize = pmax.int normalizes against the number of splits in the most resolved tree; in this case, JGI
all_nyes <- NyeSimilarity(jgi, trees, normalize = pmax.int)
##### Nye similarity scores #####
#
# Nye similarity is a generalized Robinson-Foulds metric. It finds the optimal matching that pairs each branch
# from one tree with a branch in the second and scores matches according to the size of the largest split that is
# consistent with both of them. It is then normalized against the Jaccard index.
#
# Since the following scores are similarity scores, they range from 0-1 with 1 being a perfect match.
#
# Aim 1: 0.6906
# Aim 2: 0.8417
#
# ----- Aim 3 -----
# 10-90: 0.3679
# 20-80: 0.3783
# 30-70: 0.3924
# 40-60: 0.3984
# 50-50: 0.3984
# 60-40: 0.3984
# 70-30: 0.4138
# 80-20: 0.4013
# 90-10: 0.4013
# seq_str: 0.3984
# seq: 0.4013
# str: 0.3442
all_nyes
library(TreeDist)
library(ape)
setwd("/Users/ekim/Desktop/compbio-project/trees")
jgi <- read.tree("JGItree.nwk")
aim1 <- read.tree("aim1.nwk")
aim2_all <- read.tree("aim2_all.nhx")
aim2_jgi <- read.tree("aim2_jgi.nwk")
a3_10_9 <- read.tree("sample_20_comb0.10.9seqstr_tree.txt")
a3_20_8 <- read.tree("sample_20_comb0.20.8seqstr_tree.txt")
a3_30_7 <- read.tree("sample_20_comb0.30.7seqstr_tree.txt")
a3_40_6 <- read.tree("sample_20_comb0.40.6seqstr_tree.txt")
a3_50_5 <- read.tree("sample_20_comb0.50.5seqstr_tree.txt")
a3_60_4 <- read.tree("sample_20_comb0.60.4seqstr_tree.txt")
a3_70_3 <- read.tree("sample_20_comb0.70.3seqstr_tree.txt")
a3_80_2 <- read.tree("sample_20_comb0.80.2seqstr_tree.txt")
a3_90_1 <- read.tree("sample_20_comb0.90.1seqstr_tree.txt")
a3_ss <- read.tree("sample_20_seq_str_tree.txt")
a3_seq <- read.tree("sample_20_seq_tree.txt")
a3_str <- read.tree("sample_20_str_tree.txt")
trees <- c(aim1, aim2_all, aim2_jgi, a3_10_9, a3_20_8, a3_30_7, a3_40_6, a3_50_5, a3_60_4, a3_70_3, a3_80_2, a3_90_1, a3_ss, a3_seq, a3_str)
# normalize = pmax.int normalizes against the number of splits in the most resolved tree; in this case, JGI
all_nyes <- NyeSimilarity(jgi, trees, normalize = pmax.int)
##### Nye similarity scores #####
#
# Nye similarity is a generalized Robinson-Foulds metric. It finds the optimal matching that pairs each branch
# from one tree with a branch in the second and scores matches according to the size of the largest split that is
# consistent with both of them. It is then normalized against the Jaccard index.
#
# Since the following scores are similarity scores, they range from 0-1 with 1 being a perfect match.
#
# Aim 1: 0.6906
# Aim 2: 0.8417
#
# ----- Aim 3 -----
# 10-90: 0.6281
# 20-80: 0.3783
# 30-70: 0.3924
# 40-60: 0.3984
# 50-50: 0.3984
# 60-40: 0.3984
# 70-30: 0.4138
# 80-20: 0.4013
# 90-10: 0.4013
# seq_str: 0.3984
# seq: 0.4013
# str: 0.3442
all_nyes
setwd("/Users/ekim/Desktop/compbio-project/trees")
jgi <- read.tree("JGItree.nwk")
aim1 <- read.tree("aim1.nwk")
aim2_all <- read.tree("aim2_all.nhx")
aim2_jgi <- read.tree("aim2_jgi.nwk")
a3_10_9 <- read.tree("sample_20_comb0.10.9seqstr_tree.txt")
a3_20_8 <- read.tree("sample_20_comb0.20.8seqstr_tree.txt")
a3_30_7 <- read.tree("sample_20_comb0.30.7seqstr_tree.txt")
a3_40_6 <- read.tree("sample_20_comb0.40.6seqstr_tree.txt")
a3_50_5 <- read.tree("sample_20_comb0.50.5seqstr_tree.txt")
a3_60_4 <- read.tree("sample_20_comb0.60.4seqstr_tree.txt")
a3_70_3 <- read.tree("sample_20_comb0.70.3seqstr_tree.txt")
a3_80_2 <- read.tree("sample_20_comb0.80.2seqstr_tree.txt")
a3_90_1 <- read.tree("sample_20_comb0.90.1seqstr_tree.txt")
a3_ss <- read.tree("sample_20_seq_str_tree.txt")
a3_seq <- read.tree("sample_20_seq_tree.txt")
a3_str <- read.tree("sample_20_str_tree.txt")
trees <- c(aim1, aim2_all, aim2_jgi, a3_10_9, a3_20_8, a3_30_7, a3_40_6, a3_50_5, a3_60_4, a3_70_3, a3_80_2, a3_90_1, a3_ss, a3_seq, a3_str)
# normalize = pmax.int normalizes against the number of splits in the most resolved tree; in this case, JGI
all_nyes <- NyeSimilarity(jgi, trees, normalize = pmax.int)
##### Nye similarity scores #####
#
# Nye similarity is a generalized Robinson-Foulds metric. It finds the optimal matching that pairs each branch
# from one tree with a branch in the second and scores matches according to the size of the largest split that is
# consistent with both of them. It is then normalized against the Jaccard index.
#
# Since the following scores are similarity scores, they range from 0-1 with 1 being a perfect match.
#
# Aim 1: 0.6906
# Aim 2: 0.8417
#
# ----- Aim 3 -----
# 10-90: 0.6281
# 20-80: 0.3783
# 30-70: 0.3924
# 40-60: 0.3984
# 50-50: 0.3984
# 60-40: 0.3984
# 70-30: 0.4138
# 80-20: 0.4013
# 90-10: 0.4013
# seq_str: 0.3984
# seq: 0.4013
# str: 0.3442
all_nyes
